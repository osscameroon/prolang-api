scalar Date

type YearGroup {
  id: ID!
  name: String!
  position: Int!
}

type Author {
  id: ID!
  birthDate: Date
  country: String
  link: String
  name: String!
  picture: String
}

type NameExtra {
  name: String
  link: String
}

type Language {
  id: ID!
  authors: [Author!]!
  company: String
  link: String
  listed: Boolean!
  name: String!
  nameExtra: NameExtra
  predecessors: [Language!]!
  yearConfirmed: Boolean!
  yearGroup: YearGroup!
  years: [Int!]!
}

type PaginatedAuthor {
  currentPage: Int!
  limit: Int!
  totalItems: Int!
  totalPages: Int!
  items: [Author!]!
}

type PaginatedLanguage {
  currentPage: Int!
  limit: Int!
  totalItems: Int!
  totalPages: Int!
  items: [Language!]!
}


type Query {
  allYearGroups: [YearGroup!]!
  oneYearGroup(idOrName: ID!): YearGroup!
  allAuthors: [Author!]!
  authors(page: Int, search: String): PaginatedAuthor!
  oneAuthor(id: ID!): Author!
  allLanguages: [Language!]!
  languages(page: Int, search: String): PaginatedLanguage!
  languagesByYearGroup(name: String!, page: Int, search: String): PaginatedLanguage!
  oneLanguage(id: ID!): Language!
}